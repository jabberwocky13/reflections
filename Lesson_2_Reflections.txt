What happens when you initialize a repository? Why do you need to do it?

	It creates a .git directory within your current directory, which basically
	serves as the metadata upon which git relies to track your changes. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	the staging area is different from the repository and directory because it
	isn't permanent. it exists only temporarily until you make the commit. 
	However, it adds a great deal of value, because it allows you to prepare
	and seperate your files into different logical steps when making your 
	initial commits.

How can you use the staging area to make sure you have one commit per logical
change?

	the staging area allows you to review all of your changes within a given 
	period of time. you can look over your work and identify which files have
	changed, and commit the ones that have been updated in relation to a logical
	change as a group, rather than just blanket committing all changes made 
	within a given period of time.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When you are trying something "experimental" with your code, or when you are
	trying to create different versions of a file. Another time would be when you
	have multiple people collaborating on a file (you can merge all of their 
	changes later on)

How do the diagrams help you visualize the branch structure?

	diagrams are great for tracking all the branches of your git code that exist,
	their purpose, and all the commits that are contained within them.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?